const mt_ws_channel = require('./src/mt-ws-channel');
const mt_rest_channel = require('./src/mt-rest-channel');

/**
 * Create a new gateway instance that can connect to and interact with Major Tom.
 */
function mt_node_gateway() {
  let ws_channel;
  let rest_channel;
  let mt_message_handler; // Allow the message handler to be set before connection.

  /**
   * Connect this gateway instance to Major Tom
   * @param {String} ws_connect_host The fully formed WebSocket url for your Major Tom instance
   * @param {String} token The gateway token for this gateway
   * @param {String} [username] The basic auth username needed to connect to your Major Tom instance
   * @param {String} [password] The basic auth password needed to connect to your Major Tom instance
   */
  function connect_to_mt(ws_connect_host, token, username, password) {
    const ws_regex = /^ws(s?):\/\//;
    if (ws_connect_host.search(ws_regex) !== 0) {
      throw new Error(
        'Connect to major tom with a host that includes a valid websocket protocol'
      );
    }

    const ws_host = (username && password)
      ? ws_connect_host.replace(ws_regex, `ws$1://${username}:${password}@`)
      : ws_connect_host;

    const full_ws_url =
      `${ws_host}/gateway_api/v1.0?gateway_token=${token}`;

    // Invoke ws channel with fully formed websocket url
    ws_channel = mt_ws_channel(full_ws_url);
    // Invoke rest channel with the protocol + auth? & hostname, token
    rest_channel = mt_rest_channel(
      ws_host.replace(ws_regex, 'http$1://'),
      token
    );

    // Add message handler if one has been set
    if (mt_message_handler) {
      ws_channel.on_message(mt_message_handler);
      rest_channel.on_message(mt_message_handler);

      mt_message_handler = undefined;
    }
  }

  /**
   * Pass a callback function to the gateway to execute when a message is received from your Major
   * Tom instance. The callback will receive a single string argument.
   * @param {Function} cb Callback to execute when a message is received from Major Tom.
   */
  function on_mt_message(cb) {
    if (typeof cb !== 'function') {
      throw new Error('Argument to on_mt_message must be a callback function');
    }

    if (ws_channel) ws_channel.on_message(cb);
    if (rest_channel) rest_channel.on_message(cb);

    mt_message_handler = cb;
  }

  /**
   * Send the passed message to Major Tom. Expects an object or a JSON string. You are responsible
   * for making sure the argument is in a format Major Tom understands.
   * @param {String|Object} msg A message to send to your Major Tom instance.
   */
  function to_mt(msg) {
    if (ws_channel) {
      ws_channel.send(msg);
    } else {
      throw new Error('Nowhere to send; gateway is not connected to Major Tom');
    }
  }

  /**
   * Closes the WebSocket connection with Major Tom.
   */
  function disconnect_from_mt() {
    if (ws_channel) ws_channel.close();
  }

  /**
   * Start a download of the file at the passed path, from Major Tom to this gateway.
   * @param {String} download_path Where your Major Tom instance has stored this file, typically generated by Major Tom
   */
  function download_file_from_mt(download_path) {
    if (rest_channel) {
      rest_channel.download_file_from_mt(download_path)
    }
  }

  /**
   * Check whether this gateway is connected to your Major Tom instance or not
   * @returns {Boolean}
   */
  function is_connected_to_mt() {
    return !!ws_channel && ws_channel.is_connected();
  }

  /**
   * Allow this gateway to respond to downloading a file from Major Tom. The success handler will
   * receive one or two arguments: the first argument will be a File chunk as the file is
   * downloaded; the second argument will only be `true` if the download has finished. The failure
   * handler's first argument will always be an Error object. The failure callback can be omitted
   * if the success handler checks for argument one being instanceof Error, and handles that path
   * accordingly.
   * @param {Function} success The handler for downloading a file from Major Tom.
   * @param {Function} [failure] The failure handler for downloading a file from Major Tom.
   */
  function on_file_download(success, failure) {
    if (rest_channel) {
      rest_channel.handle_file_download(success, failure);
    } else {
      throw new Error('Cannot set file upload callback until gateway is connected to Major Tom');
    }
  }

  /**
   * Allow this gateway to respond to an attempt to upload a file from the gateway to Major Tom.
   * @param {Function} success The handler for when a file upload is finished successfully
   * @param {Function} failure The handler for a failed file upload
   */
  function on_file_upload(success, failure) {
    if (rest_channel) {
      rest_channel.handle_file_upload(success, failure);
    } else {
      throw new Error('Cannot set file download callback until gateway is connected to Major Tom');
    }
  }

  /**
   * Uploads the passed file buffer to Major Tom, using the provided file name and system name.
   * @param {Buffer} File The file contents as a Buffer
   * @param {String} file_name The file name
   * @param {String} system_name A system name recognized by Major Tom
   */
  function upload_file_to_mt(File, file_name, system_name) {
    if (rest_channel) {
      rest_channel.upload_file_to_mt(File, file_name, system_name);
    } else {
      throw new Error('Cannot set file upload callback until gateway is connected to Major Tom');
    }
  }

  return {
    connect_to_mt,
    disconnect_from_mt,
    download_file_from_mt,
    is_connected_to_mt,
    on_file_download,
    on_file_upload,
    on_mt_message,
    to_mt,
    upload_file_to_mt,
  };
}

module.exports = mt_node_gateway;
